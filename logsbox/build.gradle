apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'

apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.mskn73'

android {

    compileSdkVersion compile_sdk

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    defaultConfig {
        targetSdkVersion target_sdk
        minSdkVersion min_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        buildConfigField "boolean", "NO_OP", "false"
    }

    buildTypes {
        noop {
            minifyEnabled false
            buildConfigField "boolean", "NO_OP", "true"
            consumerProguardFiles 'proguard-rules.pro', 'proguard-noop.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }
}

android.libraryVariants.all { variant ->
    if (variant.name.toLowerCase().contains("debug")) {
        return
    }
    def bundleTask = tasks["bundle${variant.name.capitalize()}Aar"]
    artifacts {
        archives(bundleTask.archivePath) {
            classifier variant.name.capitalize().replace("Release", "")
            builtBy bundleTask
            name = project.name
        }
    }
}

dependencies {
    kapt libs.arch_comp_room_compiler
    kaptTest libs.arch_comp_room_compiler

    implementation libs.arch_comp_extensions
    implementation libs.arch_comp_livedata
    implementation libs.arch_comp_viewmodel
    implementation libs.arch_comp_viewmodel_ktx
    implementation libs.arch_comp_room
    implementation libs.arch_comp_room_ktx
    implementation libs.constraint
    implementation libs.design
    implementation libs.gson
    implementation libs.kotlin_stdlib
    implementation libs.seismic

    testImplementation(libs.arch_comp_room_test) {
        exclude module: 'junit'
    }
    testImplementation(libs.arch_comp_test) {
        exclude module: 'junit'
    }
    testImplementation libs.junit_api
    testImplementation libs.kotlintest
    testImplementation libs.mockito_kotlin

    testRuntimeOnly libs.junit_engine

    androidTestImplementation libs.mockito_kotlin
    androidTestImplementation(libs.barista) {
        exclude group: 'com.android.support'
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
}
